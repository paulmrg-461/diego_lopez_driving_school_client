import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:diego_lopez_driving_school_client/domain/entities/attendance_report.dart';

class AttendanceReportModel extends AttendanceReport {
  AttendanceReportModel({
    required super.licensePlate,
    required super.mileage,
    required super.brand,
    required super.color,
    required super.serviceType,
    required super.observations,
    required super.name,
    required super.lastname,
    required super.phone,
    super.documentType,
    super.documentNumber,
    required super.email,
    required super.address,
    required super.createdAt,
    required super.inviteEvents,
    required super.shareContact,
    required super.sendNews,
    required super.manageRequests,
    required super.conductSurveys,
    required super.reminderRTMyEC,
    super.signatureUrl,
    super.attendanceStateImageUrl,
    super.year,
    required super.isSecondVisit,
    super.frontPressure,
    super.rearPressure,
    super.operatorUsername,
    super.engineerUsername,
    required super.hasAttendanceOwnershipCard,
    required super.hasSoat,
    required super.isTeachingAttendance,
    required super.isDischarged,
    required super.isAlarmDeactivated,
    required super.hasCenterSupport,
    super.obstacleToCheckingBrakeFluid,
    super.passengersQuantity,
    required super.isAttendanceClean,
    required super.hasCups,
    required super.hasTroubleEntering,
    required super.hasFuel,
  });

  AttendanceReportModel copyWith({
    String? licensePlate,
    int? mileage,
    String? brand,
    String? color,
    String? serviceType,
    String? observations,
    String? name,
    String? lastname,
    String? documentType,
    String? documentNumber,
    String? phone,
    String? email,
    String? address,
    DateTime? createdAt,
    bool? inviteEvents,
    bool? shareContact,
    bool? sendNews,
    bool? manageRequests,
    bool? conductSurveys,
    bool? reminderRTMyEC,
    String? signatureUrl,
    String? attendanceStateImageUrl,
    String? year,
    bool? isSecondVisit,
    int? frontPressure,
    int? rearPressure,
    String? operatorUsername,
    String? engineerUsername,
    bool? hasAttendanceOwnershipCard,
    bool? hasSoat,
    bool? isTeachingAttendance,
    bool? isDischarged,
    bool? isAlarmDeactivated,
    bool? hasCenterSupport,
    String? obstacleToCheckingBrakeFluid,
    int? passengersQuantity,
    bool? isAttendanceClean,
    bool? hasCups,
    bool? hasTroubleEntering,
    bool? hasFuel,
  }) {
    return AttendanceReportModel(
      licensePlate: licensePlate ?? this.licensePlate,
      mileage: mileage ?? this.mileage,
      brand: brand ?? this.brand,
      color: color ?? this.color,
      serviceType: serviceType ?? this.serviceType,
      observations: observations ?? this.observations,
      name: name ?? this.name,
      lastname: lastname ?? this.lastname,
      documentType: documentType ?? this.documentType,
      documentNumber: documentNumber ?? this.documentNumber,
      phone: phone ?? this.phone,
      email: email ?? this.email,
      address: address ?? this.address,
      createdAt: createdAt ?? this.createdAt,
      inviteEvents: inviteEvents ?? this.inviteEvents,
      shareContact: shareContact ?? this.shareContact,
      sendNews: sendNews ?? this.sendNews,
      manageRequests: manageRequests ?? this.manageRequests,
      conductSurveys: conductSurveys ?? this.conductSurveys,
      reminderRTMyEC: reminderRTMyEC ?? this.reminderRTMyEC,
      signatureUrl: signatureUrl ?? this.signatureUrl,
      attendanceStateImageUrl:
          attendanceStateImageUrl ?? this.attendanceStateImageUrl,
      year: year ?? this.year,
      isSecondVisit: isSecondVisit ?? this.isSecondVisit,
      frontPressure: frontPressure ?? this.frontPressure,
      rearPressure: rearPressure ?? this.rearPressure,
      operatorUsername: operatorUsername ?? this.operatorUsername,
      engineerUsername: engineerUsername ?? this.engineerUsername,
      hasAttendanceOwnershipCard:
          hasAttendanceOwnershipCard ?? this.hasAttendanceOwnershipCard,
      hasSoat: hasSoat ?? this.hasSoat,
      isTeachingAttendance: isTeachingAttendance ?? this.isTeachingAttendance,
      isDischarged: isDischarged ?? this.isDischarged,
      isAlarmDeactivated: isAlarmDeactivated ?? this.isAlarmDeactivated,
      hasCenterSupport: hasCenterSupport ?? this.hasCenterSupport,
      obstacleToCheckingBrakeFluid:
          obstacleToCheckingBrakeFluid ?? this.obstacleToCheckingBrakeFluid,
      passengersQuantity: passengersQuantity ?? this.passengersQuantity,
      isAttendanceClean: isAttendanceClean ?? this.isAttendanceClean,
      hasCups: hasCups ?? this.hasCups,
      hasTroubleEntering: hasTroubleEntering ?? this.hasTroubleEntering,
      hasFuel: hasFuel ?? this.hasFuel,
    );
  }

  // Convertir AttendanceReportModel a Map<String, dynamic> para Firestore
  Map<String, dynamic> toMap() {
    return {
      'licensePlate': licensePlate,
      'mileage': mileage,
      'brand': brand,
      'color': color,
      'serviceType': serviceType,
      'observations': observations,
      'name': name,
      'lastname': lastname,
      'documentType': documentType ?? '',
      'documentNumber': documentNumber ?? '',
      'phone': phone,
      'email': email,
      'address': address,
      'createdAt': createdAt.toIso8601String(),
      'inviteEvents': inviteEvents,
      'shareContact': shareContact,
      'sendNews': sendNews,
      'manageRequests': manageRequests,
      'conductSurveys': conductSurveys,
      'reminderRTMyEC': reminderRTMyEC,
      'signatureUrl': signatureUrl ?? '',
      'attendanceStateImageUrl': attendanceStateImageUrl ?? '',
      'year': year ?? '',
      'isSecondVisit': isSecondVisit ?? '',
      'frontPressure': frontPressure ?? 0,
      'rearPressure': rearPressure ?? 0,
      'operatorUsername': operatorUsername ?? '',
      'engineerUsername': engineerUsername ?? '',
      'hasAttendanceOwnershipCard': hasAttendanceOwnershipCard ?? false,
      'hasSoat': hasSoat ?? false,
      'isTeachingAttendance': isTeachingAttendance ?? false,
      'isDischarged': isDischarged ?? false,
      'isAlarmDeactivated': isAlarmDeactivated ?? false,
      'hasCenterSupport': hasCenterSupport ?? false,
      'obstacleToCheckingBrakeFluid': obstacleToCheckingBrakeFluid ?? '',
      'passengersQuantity': passengersQuantity ?? 1,
      'isAttendanceClean': isAttendanceClean ?? false,
      'hasCups': hasCups ?? false,
      'hasTroubleEntering': hasTroubleEntering ?? false,
      'hasFuel': hasFuel ?? false,
    };
  }

  factory AttendanceReportModel.fromSnapshot(DocumentSnapshot snapshot) {
    final data = snapshot.data() as Map<String, dynamic>;
    return AttendanceReportModel(
      licensePlate: data['licensePlate'],
      mileage: data['mileage'],
      brand: data['brand'],
      color: data['color'],
      serviceType: data['serviceType'],
      observations: data['observations'],
      name: data['name'],
      lastname: "${data['lastname']}",
      documentType: data['documentType'],
      documentNumber: "${data['documentNumber']}",
      phone: data['phone'],
      email: data['email'],
      address: data['address'],
      createdAt: DateTime.parse(data['createdAt']),
      inviteEvents: data['inviteEvents'],
      shareContact: data['shareContact'],
      sendNews: data['sendNews'],
      manageRequests: data['manageRequests'],
      conductSurveys: data['conductSurveys'],
      reminderRTMyEC: data['reminderRTMyEC'],
      signatureUrl: data['signatureUrl'],
      attendanceStateImageUrl: data['attendanceStateImageUrl'],
      year: data['year'],
      isSecondVisit: data['isSecondVisit'],
      frontPressure: data['frontPressure'],
      rearPressure: data['rearPressure'],
      operatorUsername: data['operatorUsername'],
      engineerUsername: data['engineerUsername'],
      hasAttendanceOwnershipCard: data['hasAttendanceOwnershipCard'],
      hasSoat: data['hasSoat'],
      isTeachingAttendance: data['isTeachingAttendance'],
      isDischarged: data['isDischarged'],
      isAlarmDeactivated: data['isAlarmDeactivated'],
      hasCenterSupport: data['hasCenterSupport'],
      obstacleToCheckingBrakeFluid: data['obstacleToCheckingBrakeFluid'],
      passengersQuantity: data['passengersQuantity'],
      isAttendanceClean: data['isAttendanceClean'],
      hasCups: data['hasCups'],
      hasTroubleEntering: data['hasTroubleEntering'],
      hasFuel: data['hasFuel'],
    );
  }
}
